使用记事本打卡本文件查看
类继承关系：
					 |--	Expr	----……详见下
	|---	Complunit		 |--	Block
	|				 |--	Condition	----	IFStmt
	|		 |--	Stmt	-|--		  |-	WhileStmt
	|		 |		 |--	BreakStmt
Node	|---	BlockItem-|		 |--	ReturnStmt
	|		 |		 |--	ContinueStmt
	|		 |			
	|		 |--	Decl	----	VarDecl
	|				 |--	FnDecl
	|---	Type	----	ArrayType
	|---	Operator
	|---	Identifier
	|---	Def


	|---	IntConstant
	|		|---	Arithmetic
	|		|---	 Relational
	|---	Binary	|---	Equality
Expr	|		|---	Logical
	|		|---	Assign
	|---	LValue
	|---	Unary
	|---	Call
类所属文件
ast 	: Node , Identifier
ast_type	: Type , ArrayType
ast_block	: Complunit , BlokItem , Stmt及其子类
ast_decl	: Decl及其子类
ast_expr	: Expr及其子类  

文件中包含的类
=============

list.h:
	List
		* deque<Element> elems
		- int NumElements() const
		- Element Nth(int index) const
		- Element Last() const
		- void InsertAt(const Element &elem, int index)
		- void Append(const Element &elem)
		- void RemoveAt(int index)
		- void RemoveLast()
		- void SetParentAll(Node *p)


ast.h:
	Node

	Identifier : Node
		* char *name
		* List<Expr*> *Elist
		- Identifier(yyltype loc, const char *name, List<Expr*> *el)
		- ...


ast_block.h:
	CompUnit : Node
		* List<Decl*> *decls
		- CompUnit(List<Decl*> *declList)
		- ...
	
	BlockItem : Node
	
	Stmt : BlokItem
		* char* exitLabel
		- Stmt(yyltype loc) : BlockItem(loc) {}
		- ...
		
	Block : Stmt
		* List<BlockItem*> *BItems
		- Block(List<BlockItem*> *BlockItems)
		- ...

	ConditionalStmt : Stmt
		* Expr *test
		* Stmt *body
		- ConditionalStmt(Expr *testExpr, Stmt *body)
		- ...

	WhileStmt : ConditionalStmt
		- WhileStmt(Expr *test, Stmt *body)

	IfStmt : ConditionalStmt
		* Stmt *elseBody
		- IfStmt(Expr *test, Stmt *thenBody, Stmt *elseBody)
		- ...

	BreakStmt : Stmt
		- BreakStmt(yyltype loc)

	ReturnStmt : Stmt
		* Expr *expr
		* bool noReturn
		- ReturnStmt(yyltype loc, Expr *expr)
		- ...

	ContinueStmt : Stmt
		- ContinueStmt(yyltype loc)


ast_decl.h:
	Def : Node
		* List<Expr *> *InitValueList
		* Identifier *name
		- Def(Identifier *n,List<Expr *> *ivl)
		- ...

	Decl : BlokItem
		* List<Def*> *defs
		- Decl(List<Def*> *d)

	VarDecl
		* Type *type
		- VarDecl(List<Def*> *d, Type *t)

	FnDecl
		* List<VarDecl*> *formals
		* Type *returnType
		* Stmt *body
		* Identifier *id
		- FnDecl(Identifier *n, Type *r, List<VarDecl*> *d) 


ast_type.h:
	Type : Node
		* int typeKind
		- Type(yyltype loc)
		- Type(int tk)
	

ast_expr.h:
	Expr : Stmt
		- Expr(yyltype loc)
	
	IntConstant : Expr
		* int value
		- IntConstant(yyltype loc, int val)

	StringConstant : Expr
		* char *value
		- StringConstant(yyltype loc, const char *val)

	Operator : Node
		* char tokenString[4]
		- Operator(yyltype loc, const char *tok)

	BinaryExpr : Expr
		* Operator *op
		* Expr *left, *right
		- BinaryExpr(Expr *lhs, Operator *op, Expr *rhs)

	LValue : Expr
		* Expr *base
		* List<Expr *> *offset
		- LValue(yyltype loc, Expr *base, List<Expr *> *offset)

	UnaryExpr : Expr
		* Operator *op
		* Expr *right
		- UnaryExpr(Operator *op, Expr *rhs)

	ArithmeticExpr : BinaryExpr
		- ArithmeticExpr(Expr *lhs, Operator *op, Expr *rhs)

	RelationalExpr : BinaryExpr
		- RelationalExpr(Expr *lhs, Operator *op, Expr *rhs)

	EqualityExpr : BinaryExpr
		- EqualityExpr(Expr *lhs, Operator *op, Expr *rhs)

	LogicalExpr : BinaryExpr
		- LogicalExpr(Expr *lhs, Operator *op, Expr *rhs)

	AssignExpr : BinaryExpr
		* Type* leftType
		* Type* rightType
		* bool isLocalVariable
		- AssignExpr(Expr *lhs, Operator *op, Expr *rhs)

	Call : Expr
		* Identifier *field
		* List<Expr*> *actuals
		- Call(yyltype loc, Identifier *field, List<Expr*> *args)

	InitValue : Expr
		* List<Expr*> *InitValueList
		- InitValue(List<Expr*> *InitValueList)

